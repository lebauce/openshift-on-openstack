heat_template_version: 2014-10-16


description: >
  OpenShift Node


parameters:

  key_name:
    type: string
    constraints:
    - custom_constraint: nova.keypair

  image:
    type: string
    constraints:
    - custom_constraint: glance.image

  flavor:
    type: string
    constraints:
    - custom_constraint: nova.flavor

  external_network:
    type: string
    constraints:
    - custom_constraint: neutron.network

  fixed_network:
    type: string
    constraints:
    - custom_constraint: neutron.network

  fixed_subnet:
    type: string
    constraints:
    - custom_constraint: neutron.subnet

  container_network:
    type: string
    constraints:
    - custom_constraint: neutron.network

  container_subnet:
    type: string
    constraints:
    - custom_constraint: neutron.subnet

  container_security_group:
    type: string

  dns_ip:
    type: string
    description: IP address of the DNS server

  rhn_username:
    type: string

  rhn_password:
    type: string
    hidden: true

  rhn_pool:
    type: string

  hostname:
    type: string

  domain_name:
    type: string

  ansible_public_key:
    type: string

  ssh_user:
    type: string

  master_hostname:
    type: string


resources:

  host:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "HOST.DOMAIN"
          params:
            HOST: {get_param: hostname}
            DOMAIN: {get_param: domain_name}
      admin_user: {get_param: ssh_user}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
      - port: {get_resource: port}
      - port: {get_resource: container_port}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}

  container_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: container_network}
      fixed_ips:
      - subnet: {get_param: container_subnet}
      replacement_policy: AUTO
      value_specs:
        port_security_enabled: false

  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: set_hostname}
      - config: {get_resource: included_files}
      - config: {get_resource: rhn_register}
      - config: {get_resource: node_boot}

  set_hostname:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        hostname: {get_param: hostname}
        fqdn:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}

  included_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        ssh_authorized_keys:
        - {get_param: ansible_public_key}
        write_files:
        - path: /usr/bin/docker-bridge-setup
          permissions: 0755
          content: {get_file: fragments/docker-bridge-setup.sh}
        - path: /root/flannel-sysconfig
          permissions: 0644
          content:
            str_replace:
              params:
                $MASTER_HOSTNAME: {get_param: master_hostname}
                $NODE_DOMAIN: {get_param: domain_name}
                $HOSTNAME:
                  str_replace:
                    template: "HOST.DOMAIN"
                    params:
                      HOST: {get_param: hostname}
                      DOMAIN: {get_param: domain_name}
              template: {get_file: fragments/flannel-sysconfig}
        - path: /usr/bin/retry
          permissions: 0755
          content: {get_file: fragments/retry.sh}
        - path: /etc/hosts
          content:
            str_replace:
              params:
                $NODE_IP: {get_attr: [floating_ip, floating_ip_address]}
                $NODE_HOSTNAME: {get_param: hostname}
                $NODE_DOMAIN: {get_param: domain_name}
              template: {get_file: fragments/etc-node-hosts}
        - path: /etc/sysconfig/network-scripts/ifcfg-eth1
          content:
            str_replace:
              params:
                $IPADDR: {get_attr: [container_port, fixed_ips, 0, ip_address]}
                $HWADDR: {get_attr: [container_port, mac_address]}
              template: {get_file: fragments/ifcfg-eth1}
        ssh_authorized_keys:
        - {get_param: ansible_public_key}

  rhn_register:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $RHN_USERNAME: {get_param: rhn_username}
            $RHN_PASSWORD: {get_param: rhn_password}
            $POOL_ID: {get_param: rhn_pool}
          template: {get_file: fragments/rhn-register.sh}

  node_boot:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $DNS_IP: {get_param: dns_ip}
          template: {get_file: fragments/node-boot.sh}

  port:
    type: OS::Neutron::Port
    properties:
      security_groups:
      - {get_resource: security_group}
      network: {get_param: fixed_network}
      fixed_ips:
      - subnet: {get_param: fixed_subnet}
      replacement_policy: AUTO

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      # Just open everything for now:
      - protocol: tcp
        port_range_min: 0
        port_range_max: 65535
      - protocol: udp
        port_range_min: 0
        port_range_max: 65535

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: port}


outputs:
  ansible_entry:
    description: Ansible inventory line for this OpenShift node
    value:
      str_replace:
        template: "HOST.DOMAIN openshift_hostname=HOST.DOMAIN openshift_public_hostname=HOST.DOMAIN"
        params:
          HOST: {get_param: hostname}
          DOMAIN: {get_param: domain_name}
  etc_hosts:
    description: A hostname/IP entry for /etc/hosts
    value:
      str_replace:
        template: "IP HOST.DOMAIN HOST"
        params:
          IP: {get_attr: [floating_ip, floating_ip_address]}
          HOST: {get_param: hostname}
          DOMAIN: {get_param: domain_name}
  ip_address:
    description: IP address of the node
    value: {get_attr: [floating_ip, floating_ip_address]}
