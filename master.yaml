heat_template_version: 2014-10-16


description: >
  OpenShift Master


parameters:

  key_name:
    type: string
    constraints:
    - custom_constraint: nova.keypair

  image:
    type: string
    constraints:
    - custom_constraint: glance.image

  flavor:
    type: string
    constraints:
    - custom_constraint: nova.flavor

  external_network:
    type: string
    constraints:
    - custom_constraint: neutron.network

  fixed_network:
    type: string
    constraints:
    - custom_constraint: neutron.network

  fixed_subnet:
    type: string
    constraints:
    - custom_constraint: neutron.subnet

  container_network:
    type: string
    constraints:
    - custom_constraint: neutron.network

  container_subnet:
    type: string
    constraints:
    - custom_constraint: neutron.subnet

  container_security_group:
    type: string

  dns_ip:
    type: string
    description: IP address of the DNS server

  rhn_username:
    type: string

  rhn_password:
    type: string
    hidden: true

  rhn_pool:
    type: string
    hidden: true

  port:
    description: >
      Neutron port (with a floating IP address) to assign to the OpenShift
      Master Nova Server
    type: string

  hostname:
    type: string

  domain_name:
    type: string

  floating_ip:
    type: string

  ansible_public_key:
    type: string

  ansible_private_key:
    type: string

  node_hostnames:
    type: string

  ssh_user:
    type: string

  openshift_ansible_git_url:
    type: string

  openshift_ansible_git_rev:
    type: string

  container_network_cidr:
    type: string

  container_subnet_length:
    type: number

resources:

  host:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "HOST.DOMAIN"
          params:
            HOST: {get_param: hostname}
            DOMAIN: {get_param: domain_name}
      admin_user: {get_param: ssh_user}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
      - port: {get_param: port}
      - port: {get_resource: container_port}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}

  container_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: container_network}
      fixed_ips:
      - subnet: {get_param: container_subnet}
      replacement_policy: AUTO
      value_specs:
        port_security_enabled: false

  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: set_hostname}
      - config: {get_resource: included_files}
      - config: {get_resource: rhn_register}
      - config: {get_resource: master_boot}

  set_hostname:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        hostname: {get_param: hostname}
        fqdn:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}

  included_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /etc/hosts
          content:
            str_replace:
              params:
                $NODE_IP: {get_param: floating_ip}
                $NODE_HOSTNAME: {get_param: hostname}
                $NODE_DOMAIN: {get_param: domain_name}
              template: {get_file: fragments/etc-node-hosts}
        - path: /etc/cloud.conf
          permissions: 0755
          content: {get_file: fragments/cloud.conf}
        - path: /usr/bin/docker-bridge-setup
          permissions: 0755
          content: {get_file: fragments/docker-bridge-setup.sh}
        - path: /usr/bin/flannel-subnet-min
          permissions: 0755
          content: {get_file: fragments/flannel-subnet-min.sh}
        - path: /var/lib/ansible-inventory
          content:
            str_replace:
              params:
                $MASTER_HOSTNAME: {get_param: hostname}
                $DOMAINNAME: {get_param: domain_name}
                $NODE_HOSTNAMES: {get_param: node_hostnames}
                $SSH_USER: {get_param: ssh_user}
                $CONTAINER_NETWORK_CIDR: {get_param: container_network_cidr}
                $CONTAINER_SUBNET_LENGTH: {get_param: container_subnet_length}
              template: {get_file: fragments/ansible-inventory}
        - path: /root/.ssh/id_rsa
          permissions: 0600
          content: {get_param: ansible_private_key}
        - path: /root/flannel-config.json
          permissions: 0644
          content:
            str_replace:
              params:
                $NETWORK: {get_param: container_network_cidr}
              template: {get_file: fragments/flannel-config.json}
        - path: /root/flannel-sysconfig
          permissions: 0644
          content:
            str_replace:
              params:
                $MASTER_HOSTNAME: {get_param: hostname}
                $NODE_DOMAIN: {get_param: domain_name}
                $HOSTNAME:
                  str_replace:
                    template: "HOST.DOMAIN"
                    params:
                      HOST: {get_param: hostname}
                      DOMAIN: {get_param: domain_name}
              template: {get_file: fragments/flannel-sysconfig}
        - path: /etc/sysconfig/network-scripts/ifcfg-eth1
          content:
            str_replace:
              params:
                $IPADDR: {get_attr: [container_port, fixed_ips, 0, ip_address]}
                $HWADDR: {get_attr: [container_port, mac_address]}
              template: {get_file: fragments/ifcfg-eth1}
        - path: /root/.ssh/id_rsa.pub
          permissions: 0600
          content: {get_param: ansible_public_key}
        - path: /usr/bin/retry
          permissions: 0755
          content: {get_file: fragments/retry.sh}
        ssh_authorized_keys:
        - {get_param: ansible_public_key}

  rhn_register:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $RHN_USERNAME: {get_param: rhn_username}
            $RHN_PASSWORD: {get_param: rhn_password}
            $POOL_ID: {get_param: rhn_pool}
          template: {get_file: fragments/rhn-register.sh}

  master_boot:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $DNS_IP: {get_param: dns_ip}
            $MASTER_IP: {get_param: floating_ip}
            $OPENSHIFT_ANSIBLE_GIT_URL: {get_param: openshift_ansible_git_url}
            $OPENSHIFT_ANSIBLE_GIT_REV: {get_param: openshift_ansible_git_rev}
            $CONTAINER_NETWORK_CIDR: {get_param: container_network_cidr}
            $HOSTNAME: {get_param: hostname}
            $DOMAIN: {get_param: domain_name}
          template: {get_file: fragments/master-boot.sh}

  ansible_installer:
    type: OS::Heat::SoftwareConfig
    properties:
      config: {get_file: fragments/ansible_installer.sh}

outputs:
  console_url:
    value:
      str_replace:
        params:
          HOSTNAME: {get_param: hostname}
          DOMAINNAME: {get_param: domain_name}
        template: "https://HOSTNAME.DOMAINNAME:8443/console/"
  api_url:
    value:
      str_replace:
        params:
          HOSTNAME: {get_param: hostname}
          DOMAINNAME: {get_param: domain_name}
        template: "https://HOSTNAME.DOMAINNAME:8443/"
